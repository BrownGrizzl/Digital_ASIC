// -------------------------------------------------------------
// 
// File Name: D:\Xilinx\proj2222\hdlsrc\least_squares\Subsystem_tb.v
// Created: 2021-10-25 16:16:25
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.01
// Target subsystem base rate: 0.01
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.01
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        0.01
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ps

module Subsystem_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire Out1_done;  // ufix1
  wire rdEnb;
  wire Out1_done_enb;  // ufix1
  reg [11:0] Out1_addr;  // ufix12
  wire Out1_active;  // ufix1
  reg [11:0] alpha1_in_out1_addr;  // ufix12
  wire alpha1_in_out1_active;  // ufix1
  reg  tb_enb_delay;
  wire alpha1_in_out1_enb;  // ufix1
  wire [11:0] alpha1_in_out1_addr_delay_1;  // ufix12
  reg signed [31:0] fp_In1;  // sfix32
  reg signed [16:0] rawData_In1;  // sfix17_En16
  reg signed [31:0] status_In1;  // sfix32
  reg signed [16:0] holdData_In1;  // sfix17_En16
  reg signed [16:0] In1_offset;  // sfix17_En16
  wire signed [16:0] In1;  // sfix17_En16
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
 
  wire signed [16:0] Out1;  // sfix17_En16
  wire Out1_enb;  // ufix1
  wire Out1_lastAddr;  // ufix1
  wire [11:0] Out1_addr_delay_1;  // ufix12
  reg signed [31:0] fp_Out1_expected;  // sfix32
  reg signed [16:0] Out1_expected;  // sfix17_En16
  reg signed [31:0] status_Out1_expected;  // sfix32
  wire signed [16:0] Out1_ref;  // sfix17_En16
  reg  Out1_testFailure;  // ufix1
  wire testFailure;  // ufix1

 
  assign Out1_done_enb = Out1_done & rdEnb;



  assign Out1_active = Out1_addr != 12'b100111000100;



  assign alpha1_in_out1_active = alpha1_in_out1_addr != 12'b100111000100;



  assign alpha1_in_out1_enb = alpha1_in_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2500
  always @(posedge clk)
    begin : alpha1_in_process
      if (reset == 1'b1) begin
        alpha1_in_out1_addr <= 12'b000000000000;
      end
      else begin
        if (alpha1_in_out1_enb) begin
          if (alpha1_in_out1_addr >= 12'b100111000100) begin
            alpha1_in_out1_addr <= 12'b000000000000;
          end
          else begin
            alpha1_in_out1_addr <= alpha1_in_out1_addr + 12'b000000000001;
          end
        end
      end
    end



  assign  alpha1_in_out1_addr_delay_1 = alpha1_in_out1_addr;

  // Data source for In1
  initial
    begin : In1_fileread
      fp_In1 = $fopen("In1.txt", "r");
      status_In1 = $rewind(fp_In1);
    end

  always @(alpha1_in_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_In1 <= 17'bx;
      end
      else if (rdEnb == 1) begin
        status_In1 = $fscanf(fp_In1, "%h", rawData_In1);
      end
    end

  // holdData reg for alpha1_in_out1
  always @(posedge clk)
    begin : stimuli_alpha1_in_out1
      if (reset) begin
        holdData_In1 <= 17'bx;
      end
      else begin
        holdData_In1 <= rawData_In1;
      end
    end

  always @(rawData_In1 or rdEnb)
    begin : stimuli_alpha1_in_out1_1
      if (rdEnb == 1'b0) begin
        In1_offset <= holdData_In1;
      end
      else begin
        In1_offset <= rawData_In1;
      end
    end

  assign  In1 = In1_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (check1_done == 1'b0 ? tb_enb_delay :
             1'b0);



  assign  clk_enable = 1;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (20);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (10);
      clk <= 1'b0;
      # (10);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (50);
        clk <= 1'b0;
        # (50);
        $stop;
      end
    end

  Subsystem u_Subsystem (.clk(clk),
                         .reset(reset),
                         .clk_enable(clk_enable),
                         .In1(In1),  // sfix17_En16
                         
                         .Out1(Out1) // sfix17_En16
                         );

                       


 wire ce_out=1;
  assign Out1_enb = 1; 



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 2500

  always @(posedge clk)
    begin : c_2_process
      if (reset == 1'b1) begin
        Out1_addr <= 12'b000000000000;
      end
      else begin
        if (Out1_enb) begin
          if (Out1_addr >= 12'b100111000100) begin
            Out1_addr <= 12'b000000000000;
          end
          else begin
            Out1_addr <= Out1_addr + 12'b000000000001;
          end
        end
      end
    end



  assign Out1_lastAddr = Out1_addr >= 12'b100111000100;



  assign Out1_done = Out1_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (Out1_done_enb) begin
          check1_done <= Out1_done;
        end
      end
    end

  assign  Out1_addr_delay_1 = Out1_addr;

  // Data source for Out1_expected
  initial
    begin : Out1_expected_fileread
      fp_Out1_expected = $fopen("Out1_expected.txt", "r");
      status_Out1_expected = $rewind(fp_Out1_expected);
    end

  always @(Out1_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (reset == 1) begin
        Out1_expected <= 17'bx;
      end
      else if (ce_out == 1) begin
        status_Out1_expected = $fscanf(fp_Out1_expected, "%h", Out1_expected);
      end
    end

  assign Out1_ref = Out1_expected;




endmodule  // Subsystem_tb

